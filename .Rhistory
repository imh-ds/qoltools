text_vif = data.frame(Term = "TEXT",
VIF = paste0("(VIF from ",
sprintf('%.3f', min(vif_table$VIF)),
" to ",
sprintf('%.3f', max(vif_table$VIF)),
")"),
VIF_CI_low = "",
VIF_CI_high = "",
SE_factor = paste0("(SE factor from ",
sprintf('%.3f', min(vif_table$SE_factor)),
" to ",
sprintf('%.3f', max(vif_table$SE_factor)),
")"),
Tolerance = paste0("(Tolerance from ",
sprintf('%.3f', min(vif_table$Tolerance)),
" to ",
sprintf('%.3f', max(vif_table$Tolerance)),
")"),
Tolerance_CI_low = "",
Tolerance_CI_high = "")
vif_table = vif_table %>%
rbind(min_vif,
max_vif,
text_vif)
reg_table = sum_table %>%
mutate(OR = paste0(sprintf('%.3f', odds_ratio),
ifelse(p_value < 0.001, "***",
ifelse(p_value < 0.01, "**",
ifelse(p_value < 0.05, "*", "")))),
"95% CI" = paste0("[",
sprintf('%.3f', or_lower),
", ",
sprintf('%.3f', or_upper),
"]")) %>%
select(variable, OR, "95% CI")
}
# If regression model is multilevel
if(class(model) == "lmerModLmerTest") {
lmer_mod = summary(model)
estimate = lmer_mod$coefficients %>%
as.data.frame() %>%
select(Estimate) %>%
rename(est = Estimate)
sd_outcome = sd(lme4::getME(model,"y"))
sd_predictors = apply(lme4::getME(model,"X"), 2, sd)
std_beta = lme4::fixef(model)*sd_predictors/sd_outcome
se_fixedeffect = coef(summary(model))[,"Std. Error"]
se = se_fixedeffect*sd_predictors/sd_outcome
names = names(std_beta)
summary = summary(model)
coefficients = summary$coefficients %>% as.data.frame()
df_val = coefficients$df
t_val = coefficients$`t value`
p_val = coefficients$`Pr(>|t|)`
names(df_val) = names(std_beta)
names(t_val) = names(std_beta)
names(p_val) = names(std_beta)
sum_table = data.frame(est = estimate,
std_est = std_beta,
std_se = se,
df = df_val,
t_stat = t_val,
p_value = p_val) %>%
mutate(ci_lower = std_est - (std_se*qnorm(0.975)),
ci_upper = std_est + (std_se*qnorm(0.975)),
text = paste0("(β = ", sprintf('%.3f', std_est),
", t(", sprintf('%.3f', df),
") = ", sprintf('%.3f', t_stat),
", 95% CI [",sprintf('%.3f', ci_lower),", ",sprintf('%.3f', ci_upper),
"], p ", ifelse(p_value < 0.001, "< 0.001",
paste("=",sprintf('%.3f', p_value))),")")) %>%
select(est, std_est, std_se, ci_lower, ci_upper, everything()) %>%
rownames_to_column(var = "variable")
vif_table = performance::check_collinearity(model) %>%
as.data.frame()
min_vif = data.frame(Term = "MIN",
VIF = min(vif_table$VIF),
VIF_CI_low = min(vif_table$VIF_CI_low),
VIF_CI_high = min(vif_table$VIF_CI_high),
SE_factor = min(vif_table$SE_factor),
Tolerance = min(vif_table$Tolerance),
Tolerance_CI_low = min(vif_table$Tolerance_CI_low),
Tolerance_CI_high = min(vif_table$Tolerance_CI_high))
max_vif = data.frame(Term = "MAX",
VIF = max(vif_table$VIF),
VIF_CI_low = max(vif_table$VIF_CI_low),
VIF_CI_high = max(vif_table$VIF_CI_high),
SE_factor = max(vif_table$SE_factor),
Tolerance = max(vif_table$Tolerance),
Tolerance_CI_low = max(vif_table$Tolerance_CI_low),
Tolerance_CI_high = max(vif_table$Tolerance_CI_high))
text_vif = data.frame(Term = "TEXT",
VIF = paste0("(VIF from ",
sprintf('%.3f', min(vif_table$VIF)),
" to ",
sprintf('%.3f', max(vif_table$VIF)),
")"),
VIF_CI_low = "",
VIF_CI_high = "",
SE_factor = paste0("(SE factor from ",
sprintf('%.3f', min(vif_table$SE_factor)),
" to ",
sprintf('%.3f', max(vif_table$SE_factor)),
")"),
Tolerance = paste0("(Tolerance from ",
sprintf('%.3f', min(vif_table$Tolerance)),
" to ",
sprintf('%.3f', max(vif_table$Tolerance)),
")"),
Tolerance_CI_low = "",
Tolerance_CI_high = "")
vif_table = vif_table %>%
rbind(min_vif,
max_vif,
text_vif)
reg_table = sum_table %>%
mutate(Beta = paste0(sprintf('%.3f', std_beta),
ifelse(p_value < 0.001, "***",
ifelse(p_value < 0.01, "**",
ifelse(p_value < 0.05, "*", "")))),
"95% CI" = paste0("[",
sprintf('%.3f', ci_lower),
", ",
sprintf('%.3f', ci_upper),
"]")) %>%
select(variable, Beta, "95% CI")
}
# If regression model is basic regression
if(class(model) == "lm") {
print("Detected Model: Linear Model (lm)")
# Get model summary and coefficients
model_summary <- summary(model)
model_coefficients <- model[["coefficients"]]
# Calculate standard deviations of outcome and predictors
sd_outcome <- sd(model[["model"]][[1]])
sd_predictors <- apply(model$model[-1] %>%
mutate(`(Intercept)` = 1) %>%
select(`(Intercept)`, everything()), 2, sd)
# Calculate standard errors and standardized betas
se_fixedeffect <- model_summary[["coefficients"]][,"Std. Error"]
std_beta <- model_coefficients * sd_predictors / sd_outcome
se <- se_fixedeffect * sd_predictors / sd_outcome
# Calculate confidence intervals
std_ci <- confint(model) * (sd_predictors / sd_outcome)
# Prepare data for summary table
coefficients <- as.data.frame(model_summary[["coefficients"]])
coefficients[["df"]] <- model_summary[["df"]][2]
sum_table <- data.frame(
est = model_coefficients,
std_est = std_beta,
std_se = se,
ci_lower = std_ci[, "2.5 %"],
ci_upper = std_ci[, "97.5 %"],
df = coefficients[["df"]],
t_stat = coefficients[["t value"]],
p_value = coefficients[["Pr(>|t|)"]]
)
# Add text column to summary table
sum_table[["text"]] <- sprintf(
"(β = %.3f, t(%.f) = %.3f, 95%% CI [%.3f, %.3f], p %s)",
sum_table[["std_est"]],
sum_table[["df"]],
sum_table[["t_stat"]],
sum_table[["ci_lower"]],
sum_table[["ci_upper"]],
ifelse(sum_table[["p_value"]] < .001, "< .001", sprintf("= %.3f", sum_table[["p_value"]]))
)
# Convert row names to a column
sum_table <- tibble::rownames_to_column(sum_table, var = "variable")
# Calculate VIF table
vif_table <- performance::check_collinearity(model) %>%
as.data.frame()
# Calculate min and max values
min_vif = data.frame(Term = "MIN",
VIF = min(vif_table[["VIF"]]),
VIF_CI_low = min(vif_table[["VIF_CI_low"]]),
VIF_CI_high = min(vif_table[["VIF_CI_high"]]),
SE_factor = min(vif_table[["SE_factor"]]),
Tolerance = min(vif_table[["Tolerance"]]),
Tolerance_CI_low = min(vif_table[["Tolerance_CI_low"]]),
Tolerance_CI_high = min(vif_table[["Tolerance_CI_high"]]))
max_vif = data.frame(Term = "MAX",
VIF = max(vif_table[["VIF"]]),
VIF_CI_low = max(vif_table[["VIF_CI_low"]]),
VIF_CI_high = max(vif_table[["VIF_CI_high"]]),
SE_factor = max(vif_table[["SE_factor"]]),
Tolerance = max(vif_table[["Tolerance"]]),
Tolerance_CI_low = max(vif_table[["Tolerance_CI_low"]]),
Tolerance_CI_high = max(vif_table[["Tolerance_CI_high"]]))
# Generate text for VIF, SE factor, and Tolerance
text_values <- c(
Term = "TEXT",
VIF = sprintf("(VIF from %.3f to %.3f)", min_vif[["VIF"]], max_vif[["VIF"]]),
VIF_CI_low = "",
VIF_CI_high = "",
SE_factor = sprintf("(SE factor from %.3f to %.3f)", min_vif[["SE_factor"]], max_vif[["SE_factor"]]),
Tolerance = sprintf("(Tolerance from %.3f to %.3f)", min_vif[["Tolerance"]], max_vif[["Tolerance"]]),
Tolerance_CI_low = "",
Tolerance_CI_high = ""
)
# Add min, max, and text rows to VIF table
vif_table <- rbind(vif_table, min_vif, max_vif, text_values)
# ---------------------- #
# -- REGRESSION TABLE -- #
# ---------------------- #
# Create wide regression table
reg_table <- sum_table %>%
mutate(Beta = paste0(sprintf('%.3f', std_beta),
ifelse(p_value < 0.001, "***",
ifelse(p_value < 0.01, "**",
ifelse(p_value < 0.05, "*", "")))),
"95% CI" = paste0("(",
sprintf('%.3f', ci_lower),
", ",
sprintf('%.3f', ci_upper),
")")) %>%
select(variable, Beta, "95% CI")
# Extract regression fits
fit_table <- data.frame(R2 = summary[["r.squared"]],
R2_adj = summary[["adj.r.squared"]],
F_stat = summary[["fstatistic"]][[1]],
num_df = summary[["fstatistic"]][[2]],
den_df = summary[["fstatistic"]][[3]])
}
sheets = list("coef" = sum_table,
"fit" = fit_table,
"vif" = vif_table,
"table" = reg_table)
return(sheets)
}
data <- carData::WVS
multimodel <- lmerTest::lmer(as.numeric(poverty) ~ degree + age + gender + (1|country),
data = data)
std_coef(multimodel)
#' metrics for a chi-square independent proportions test.
#' Automatically applies holm p adjustment to multiple comparisons. Returns
#' model statistic and also pairwise comparison results.
#'
#' @param data A dataframe object. This should be a structured dataset where
#' each column represents a variable and each row represents an observation.
#' @param group Group variable.
#' @param outcomes Vector of outcome variable names (strings)
#'
#' @export
proportion_test <- function(data = .,
group,
outcomes){
# Make empty lists
stat_list <- list()
prop_list <- list()
pairwise_list <- list()
# Get unique number of groups
group_pairs <- combn(unique(data[[group]]), 2, simplify = FALSE)
for(ovar in outcomes){
# Create crosstab
table <- table(data[[group]],
data[[ovar]])
# Run proportions test
result <- prop.test(table,
correct = T)
# Get proportions test statistics dataframe
stats <- data.frame(chisq = result$statistic,
df = result$parameter,
p = result$p.value,
method = result$method) %>%
mutate(text = paste0("X2(",
df,
") = ",
sprintf('%.3f', chisq),
", p ",
ifelse(p < .001,
"< .001", paste0("= ", sprintf('%.3f', p))),
")")) %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar)
# Get percentage proportion
proportions <- result$estimate %>%
as.data.frame() %>%
rename(Proportion_grp1 = ".") %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar,
Proportion_grp2 = 1-Proportion_grp1)
# Join together
table <- table %>%
as.data.frame() %>%
pivot_wider(names_from = Var2, values_from = Freq) %>%
rename(Group = "Var1") %>%
cbind(proportions)
# Load into list
stat_list[[ovar]] <- stats
prop_list[[ovar]] <- table
# ------------------------- #
# -- PAIRWISE COMPARISON -- #
# ------------------------- #
for(pair in seq_along(group_pairs)){
# Define groups
group1 <- group_pairs[[pair]][[1]]
group2 <- group_pairs[[pair]][[2]]
# Subset the data for the current pair of groups
data_subset <- data %>% filter(!!sym(group) %in% c(group1, group2))
# Create crosstab
table_pair <- table(data_subset[[group]],
data_subset[[ovar]])
# Run proportions test
result_pair <- prop.test(table_pair,
correct = T)
# Get proportions test statistics dataframe
stats_pair <- data.frame(chisq = result_pair$statistic,
df = result_pair$parameter,
p = result_pair$p.value) %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar,
Group_1 = group_pairs[[pair]][[1]],
Group_2 = group_pairs[[pair]][[2]]) %>%
select(Outcome, Group_1, Group_2, everything())
# Save to list
name <- paste0(ovar,
"_",
paste0(pair, collapse = "_"))
pairwise_list[[name]] <- stats_pair
}
}
# Reduce to working export dataframe
stat_export <- purrr::reduce(stat_list, rbind)
prop_export <- purrr::reduce(prop_list, rbind)
pairwise_export <- purrr::reduce(pairwise_list, rbind)
# Correct p value in pairwise
corrected_p <- list()
# Loop separately for every outcome
for(ovar in outcomes){
# Filter to specific outcome
holm_df <- pairwise_export %>%
filter(Outcome %in% ovar)
# Apply Holm p adjustment
holm_p <- p.adjust(holm_df$p,
method = "holm") %>%
as.data.frame() %>%
rename("p_holm" = ".")
# Assign
corrected_p[[ovar]] <- holm_p
}
# Reduce to single dataframe
corrected_p_df <- purrr::reduce(corrected_p,
rbind)
# Merge with pairwise export dataframe and apply pasteable text
pairwise_export <- pairwise_export %>%
cbind(corrected_p_df) %>%
mutate(text = paste0("X2(",
df,
") = ",
sprintf('%.3f', chisq),
", p_holm ",
ifelse(p < .001,
"< .001", paste0("= ", sprintf('%.3f', p_holm))),
")"))
# Aggregate to reportable sheet
results_sheet <- list(stat = stat_export,
prop = prop_export,
pair = pairwise_export)
# Return results
return(results_sheet)
}
data <- carData::WVS
proportion_test(data = data,
group = "country",
outcomes = c("degree",
"gender"))
library(tidyverse)
proportion_test(data = data,
group = "country",
outcomes = c("degree",
"gender"))
# Make empty lists
stat_list <- list()
prop_list <- list()
pairwise_list <- list()
# Get unique number of groups
group_pairs <- combn(unique(data[[group]]), 2, simplify = FALSE)
group = "country"
outcomes = c("degree", "gender")
# Get unique number of groups
group_pairs <- combn(unique(data[[group]]), 2, simplify = FALSE)
group_pairs
ovar = "degree"
# Create crosstab
table <- table(data[[group]],
data[[ovar]])
table
# Run proportions test
result <- prop.test(table,
correct = T)
result
# Get proportions test statistics dataframe
stats <- data.frame(chisq = result$statistic,
df = result$parameter,
p = result$p.value,
method = result$method) %>%
mutate(text = paste0("X2(",
df,
") = ",
sprintf('%.3f', chisq),
", p ",
ifelse(p < .001,
"< .001", paste0("= ", sprintf('%.3f', p))),
")")) %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar)
stats
# Get percentage proportion
proportions <- result$estimate %>%
as.data.frame() %>%
rename(Proportion_grp1 = ".") %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar,
Proportion_grp2 = 1-Proportion_grp1)
proportions
# Join together
table <- table %>%
as.data.frame() %>%
pivot_wider(names_from = Var2, values_from = Freq) %>%
rename(Group = "Var1") %>%
cbind(proportions)
# Load into list
stat_list[[ovar]] <- stats
prop_list[[ovar]] <- table
group_pairs
group_pairs[[1]]
group_pairs[["1"]]
for(pair in seq_along(group_pairs)){
# Define groups
group1 <- group_pairs[[pair]][[1]]
group2 <- group_pairs[[pair]][[2]]
# Subset the data for the current pair of groups
data_subset <- data %>% filter(!!sym(group) %in% c(group1, group2))
# Create crosstab
table_pair <- table(data_subset[[group]],
data_subset[[ovar]])
# Run proportions test
result_pair <- prop.test(table_pair,
correct = T)
# Get proportions test statistics dataframe
stats_pair <- data.frame(chisq = result_pair$statistic,
df = result_pair$parameter,
p = result_pair$p.value) %>%
rownames_to_column(var = "Outcome") %>%
mutate(Outcome = ovar,
Group_1 = group_pairs[[pair]][[1]],
Group_2 = group_pairs[[pair]][[2]]) %>%
select(Outcome, Group_1, Group_2, everything())
# Save to list
name <- paste0(ovar,
"_",
paste0(pair, collapse = "_"))
pairwise_list[[name]] <- stats_pair
}
group_pairs[[1]][[1]]
group_pairs[[1]][[2]]
pair = 1
# Define groups
group1 <- group_pairs[[pair]][[1]]
group2 <- group_pairs[[pair]][[2]]
# Subset the data for the current pair of groups
data_subset <- data %>% filter(!!sym(group) %in% c(group1, group2))
# Create crosstab
table_pair <- table(data_subset[[group]],
data_subset[[ovar]])
# Run proportions test
result_pair <- prop.test(table_pair,
correct = T)
table_pair
data <- carData::WVS %>%
mutate(across(.cols = c(poverty, religion, degree, gender),
.fns = function(x) as.integer(x)))
data <- carData::WVS %>%
mutate(across(.cols = c(poverty, religion, degree, gender),
.fns = function(x) as.integer(x)),
country = as.character(country))
proportion_test(data = data,
group = "country",
outcomes = c("degree",
"gender"))
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
remove(proportion_test())
remove(proportion_test
)
roxygenise()
devtools::install_github("imh-ds/qoltools")
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("imh-ds/qoltools")
library(qoltools)
detach("package:qoltools", unload = TRUE)
remove.packages("qoltools")
devtools::install_github("imh-ds/qoltools")
library(qoltools)
?proportion_test
library(roxygen2)
roxygenise()
roxygenise()
Sys.setenv(GITHUB_PAT = "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")
remove.packages("qoltools")
devtools::install_github("imh-ds/qoltools")
1
devtools::install_github("imh-ds/qoltools")
roxygenise()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
